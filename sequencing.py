import numpy as np

'''
this module contains the job sequencing rules used in the experiment
sequencing agents may choose to follow one of following rules
or choose to use trained parameters for decision-making
'''

# 1Ô∏è Random: Ch·ªçn ng·∫´u nhi√™n m·ªôt c√¥ng vi·ªác trong h√†ng ƒë·ª£i
def random_sequencing(data):
    # Ch·ªçn ng·∫´u nhi√™n m·ªôt ch·ªâ s·ªë c√¥ng vi·ªác t·ª´ danh s√°ch
    job_position = np.random.randint(len(data[0]))
    return job_position


# 2Ô∏è Shortest Processing Time (SPT): ∆Øu ti√™n c√¥ng vi·ªác c√≥ th·ªùi gian x·ª≠ l√Ω ng·∫Øn nh·∫•t
def SPT(data):
    # data[0] ch·ª©a th·ªùi gian x·ª≠ l√Ω t·ª´ng c√¥ng vi·ªác
    job_position = np.argmin(data[0])
    return job_position


# 3Ô∏è Longest Processing Time (LPT): ∆Øu ti√™n c√¥ng vi·ªác c√≥ th·ªùi gian x·ª≠ l√Ω d√†i nh·∫•t
def LPT(data):
    job_position = np.argmax(data[0])
    return job_position


# 4Ô∏è Least Remaining Operations (LRO): C√¥ng vi·ªác c√≤n √≠t c√¥ng ƒëo·∫°n nh·∫•t
def LRO(data):
    # data[10] ch·ª©a s·ªë c√¥ng ƒëo·∫°n c√≤n l·∫°i
    job_position = np.argmax(data[10])
    return job_position


# 5Ô∏è Least Work Remaining (LWKR): T·ªïng c√¥ng vi·ªác c√≤n l·∫°i √≠t nh·∫•t
def LWKR(data):
    # T·ªïng th·ªùi gian c√≤n l·∫°i = th·ªùi gian x·ª≠ l√Ω + th·ªùi gian ch·ªù
    job_position = np.argmin(data[0] + data[1])
    return job_position


# 6Ô∏è LWKR + SPT: K·∫øt h·ª£p hai ch·ªâ ti√™u
def LWKRSPT(data):
    # Nh√¢n ƒë√¥i PT ƒë·ªÉ ∆∞u ti√™n SPT h∆°n
    job_position = np.argmin(data[0]*2 + data[1])
    return job_position


# 7Ô∏è LWKR + MOD (Modified Operational Due Date)
def LWKRMOD(data):
    due = data[2]  # h·∫°n ch√≥t
    operational_finish = data[0] + data[3]  # th·ªùi ƒëi·ªÉm k·∫øt th√∫c sau c√¥ng ƒëo·∫°n hi·ªán t·∫°i
    MOD = np.max([due, operational_finish], axis=0)  # ch·ªâ ti√™u MOD
    job_position = np.argmin(data[0] + data[1] + MOD)
    return job_position


# 8Ô∏è Earliest Due Date (EDD): ∆Øu ti√™n c√¥ng vi·ªác c√≥ deadline s·ªõm nh·∫•t
def EDD(data):
    job_position = np.argmin(data[2])
    return job_position


# 9Ô∏è COVERT: Cost Over Time Rule
def COVERT(data):
    average_pt = data[0].mean()
    cost = (data[2] - data[3] - data[0]).clip(0, None)
    # ∆Øu ti√™n cao n·∫øu cost th·∫•p ho·∫∑c PT nh·ªè
    priority = (1 - cost / (0.05 * average_pt)).clip(0, None) / data[0]
    job_position = priority.argmax()
    return job_position


# 10 Critical Ratio (CR): T·ª∑ l·ªá gi·ªØa th·ªùi gian c√≤n l·∫°i v√† t·ªïng th·ªùi gian y√™u c·∫ßu
def CR(data):
    CR = data[5] / (data[0] + data[1])
    job_position = CR.argmin()
    return job_position


# 11 CR k·∫øt h·ª£p v·ªõi SPT
def CRSPT(data):
    CRSPT = data[5] / (data[0] + data[1]) + data[0]
    job_position = CRSPT.argmin()
    return job_position


# 12 Minimum Slack: Ch·ªçn c√¥ng vi·ªác c√≥ ƒë·ªô tr·ªÖ nh·ªè nh·∫•t
def MS(data):
    slack = data[6]
    job_position = slack.argmin()
    return job_position


# 13 Modified Due Date (MDD)
def MDD(data):
    finish = data[1] + data[3]
    MDD = np.max([data[2], finish], axis=0)
    job_position = MDD.argmin()
    return job_position


# 14 Montagne Rule: D·ª±a tr√™n t·ª∑ s·ªë gi·ªØa deadline v√† t·ªïng PT
def MON(data):
    due_over_pt = np.array(data[2]) / np.sum(data[0])
    priority = due_over_pt / np.array(data[0])
    job_position = priority.argmax()
    return job_position


# 15 MOD: Modified Operational Due Date
def MOD(data):
    operational_finish = data[0] + data[3]
    MOD = np.max([data[2], operational_finish], axis=0)
    job_position = MOD.argmin()
    return job_position


# 16 NPT: Next Processing Time ‚Äì th·ªùi gian x·ª≠ l√Ω ti·∫øp theo
def NPT(data):
    job_position = np.argmin(data[9])
    return job_position


# 17 Apparent Tardiness Cost (ATC): heuristic ph·ªï bi·∫øn trong FJSP
def ATC(data):
    average_pt = data[0].mean()
    cost = (data[2] - data[3] - data[0]).clip(0, None)
    priority = np.exp(-cost / (0.05 * average_pt)) / data[0]
    job_position = priority.argmax()
    return job_position


# 18 AVPRO: Average Processing Time per Operation
def AVPRO(data):
    AVPRO = (data[0] + data[1]) / (data[10] + 1)
    job_position = AVPRO.argmin()
    return job_position


def SRMWK(data): # slack per remaining work, identical to CR
    SRMWK = data[6] / (data[0] + data[1])
    job_position = SRMWK.argmin()
    return job_position

def SRMWKSPT(data): # slack per remaining work + SPT, identical to CR+SPT
    SRMWKSPT = data[6] / (data[0] + data[1]) + data[0]
    job_position = SRMWKSPT.argmin()
    return job_position

# üîÅ WINQ: Work in Next Queue ‚Äì c√¥ng vi·ªác ·ªü h√†ng ƒë·ª£i sau
def WINQ(data):
    job_position = data[7].argmin()
    return job_position


def PTWINQ(data): # PT + WINQ
    sum = data[0] + data[7]
    job_position = sum.argmin()
    return job_position

def PTWINQS(data): # PT + WINQ + Slack
    sum = data[0] + data[6] + data[7]
    job_position = sum.argmin()
    return job_position

def DPTWINQNPT(data): # 2PT + WINQ + NPT
    sum = data[0]*2 + data[7] + data[9]
    job_position = sum.argmin()
    return job_position

def DPTLWKR(data): # 2PT + LWKR
    sum = data[0]*2 + data[1]
    job_position = sum.argmin()
    return job_position

def DPTLWKRS(data): # 2PT + LWKR + slack
    sum = data[0]*2 + data[1] + data[6]
    job_position = sum.argmin()
    return job_position

def FIFO(dummy): # first in, first out, data is not needed
    job_position = 0
    return job_position

def GP_S1(data): # genetic programming rule 1
    eps = 1e-8  # gi√° tr·ªã r·∫•t nh·ªè ƒë·ªÉ tr√°nh chia cho 0

    sec1 = data[0] + data[1]

    safe_data0 = np.where(np.abs(data[0]) < eps, eps, data[0])
    safe_denom1 = np.where(np.abs(data[7] - data[1]) < eps, eps, data[7] - data[1])

    sec2 = (data[7] * 2 - 1) / safe_data0
    sec3 = (data[7] + data[1] + (data[0] + data[1]) / safe_denom1) / safe_data0

    sum = sec1 - sec2 - sec3
    job_position = sum.argmin()
    return job_position


def GP_S2(data): # genetic programming rule 2
    NIQ = len(data[0]) # s·ªë c√¥ng vi·ªác trong h√†ng ƒë·ª£i
    sec1 = NIQ * (data[0]-1)
    sec2 = data[0] + data[1] * np.max([data[0],data[7]],axis=0)
    sec3 = np.max([data[7],NIQ+data[7]],axis=0)
    sec4 = (data[8]+1+np.max([data[1],np.ones_like(data[1])*(NIQ-1)],axis=0)) * np.max([data[7],data[1]],axis=0)
    sum = sec1 * sec2 + sec3 * sec4
    job_position = sum.argmin()
    return job_position

# def GP_S3(data): # genetic programming rule 1
#     sec1 = data[0] + data[1]
#     sec2 = (data[7]*2-1) / data[0]
#     sec3 = (data[7] + data[1] + (data[0]+data[1])/(data[7]-data[1])) / data[0]
#     sum = sec1-sec2-sec3
#     job_position = sum.argmin()
#     return job_position
